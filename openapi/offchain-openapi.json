{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/subnames": {
      "post": {
        "description": "Creates or updates an offchain subname under a parent ENS name. Requires a valid API key.",
        "operationId": "SubnameNodeController_createSubname",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateSubnameRequest" },
              "examples": {
                "minimal": {
                  "summary": "Minimal example",
                  "value": {
                    "parentName": "oppunk.eth",
                    "label": "alice",
                    "owner": "0x1234...abcd"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subname created or updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubnameResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Validation failed: parentName or parentNames must be provided",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": { "description": "Missing or invalid API key" },
          "409": { "description": "Subname already exists" },
          "500": { "description": "Unexpected error" }
        },
        "security": [{ "x-auth-token": [] }],
        "summary": "Create or update a subname",
        "tags": ["Subnames"]
      }
    },
    "/api/v1/subnames/{fullSubname}": {
      "get": {
        "description": "Retrieves the details of a specific offchain subname using its full name (e.g., alice.oppunk.eth). Returns the subname details if found.",
        "operationId": "SubnameNodeController_getSingleName",
        "parameters": [
          {
            "name": "fullSubname",
            "required": true,
            "in": "path",
            "description": "The full subname to retrieve (e.g., alice.oppunk.eth)",
            "schema": { "example": "alice.oppunk.eth", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Subname found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubnameResponseDto"
                },
                "examples": {
                  "example": {
                    "summary": "Subname response",
                    "value": {
                      "id": "123",
                      "fullName": "alice.oppunk.eth",
                      "parentName": "oppunk.eth",
                      "label": "alice",
                      "texts": { "email": "alice@example.com" },
                      "addresses": { "ETH": "0x1234...abcd" },
                      "metadata": { "role": "admin" },
                      "contenthash": "ipfs://Qm...",
                      "namehash": "0xabc123..."
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid subname format" },
          "404": { "description": "Subname does not exist" },
          "500": { "description": "Unexpected error" }
        },
        "summary": "Get Subname by Full Name",
        "tags": ["Subnames"]
      },
      "delete": {
        "description": "Deletes an existing offchain subname by its full name. Requires a valid API key.",
        "operationId": "SubnameNodeController_deleteSubname",
        "parameters": [
          {
            "name": "fullSubname",
            "required": true,
            "in": "path",
            "description": "The full subname to delete (e.g., alice.oppunk.eth)",
            "schema": { "example": "alice.oppunk.eth", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Subname deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": { "message": "Subname deleted successfully" }
                }
              }
            }
          },
          "400": {
            "description": "Invalid subname format",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Validation failed: fullSubname must be at least 8 characters",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": { "description": "Missing or invalid API key" },
          "404": { "description": "Subname does not exist" },
          "500": { "description": "Unexpected error" }
        },
        "security": [{ "x-auth-token": [] }],
        "summary": "Delete a subname",
        "tags": ["Subnames"]
      }
    },
    "/api/v1/subnames/search": {
      "post": {
        "description": "Searches for subnames matching the provided criteria.",
        "operationId": "SubnameNodeController_querySubnames",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuerySubnamesRequest" },
              "examples": {
                "minimal": {
                  "summary": "Minimal example",
                  "value": {
                    "parentName": "oppunk.eth",
                    "labelSearch": "alice"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paged list of matching subnames",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "items": [
                      {
                        "id": "123",
                        "fullName": "alice.oppunk.eth",
                        "parentName": "oppunk.eth",
                        "label": "alice"
                      }
                    ],
                    "page": 1,
                    "size": 25,
                    "totalItems": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Validation failed: parentName or parentNames must be provided",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "500": { "description": "Unexpected error" }
        },
        "summary": "Query subnames",
        "tags": ["Subnames"]
      }
    }
  },
  "info": {
    "title": "Offchain Subnames API",
    "description": "API for managing offchain subnames. Provides endpoints for authentication, subname management, and statistics.",
    "version": "1.0.0",
    "contact": {
      "name": "Namespace",
      "url": "https://namespace.ninja",
      "email": "cap@namespace.ninja"
    },
    "termsOfService": "https://namespace.ninja/tos"
  },
  "tags": [{ "name": "Subnames", "description": "" }],
  "servers": [
    {
      "url": "https://offchain-manager.namespace.ninja",
      "description": "Production"
    },
    {
      "url": "https://staging.offchain-manager.namespace.ninja",
      "description": "Staging"
    }
  ],
  "components": {
    "securitySchemes": {
      "x-auth-token": {
        "type": "apiKey",
        "in": "header",
        "name": "x-auth-token"
      }
    },
    "schemas": {
      "KeyValueRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Text key",
            "example": "email"
          },
          "value": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Text value",
            "example": "alice@example.com"
          }
        },
        "required": ["key", "value"]
      },
      "AddressRecordRequest": {
        "type": "object",
        "properties": {
          "coin": {
            "type": "number",
            "description": "Coin type (e.g., 60 for ETH)",
            "example": 60
          },
          "value": {
            "type": "string",
            "description": "Coin-specific address string",
            "minLength": 5,
            "maxLength": 255,
            "example": "0x1234...abcd"
          }
        },
        "required": ["coin", "value"]
      },
      "CreateSubnameRequest": {
        "type": "object",
        "properties": {
          "parentName": {
            "type": "string",
            "description": "Parent ENS name (e.g., oppunk.eth)",
            "minLength": 7,
            "maxLength": 255,
            "example": "oppunk.eth"
          },
          "label": {
            "type": "string",
            "description": "Subname label (e.g., alice if full name is alice.oppunk.eth)",
            "minLength": 1,
            "maxLength": 255,
            "example": "alice"
          },
          "texts": {
            "description": "Text records to set on the subname",
            "example": [{ "key": "email", "value": "alice@example.com" }],
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyValueRequest" }
          },
          "addresses": {
            "description": "Address records to set on the subname",
            "example": [{ "coin": 60, "value": "0x1234...abcd" }],
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressRecordRequest" }
          },
          "metadata": {
            "description": "Arbitrary metadata stored offchain or in ENS records",
            "example": [{ "key": "role", "value": "admin" }],
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyValueRequest" }
          },
          "owner": {
            "type": "string",
            "description": "Address of the new subname owner (must be a valid Ethereum address)",
            "example": "0x1234...abcd"
          },
          "contenthash": {
            "type": "string",
            "description": "Contenthash (e.g., for IPFS/IPNS/Skynet)",
            "example": "ipfs://0xe30101701220eec561a728cb61c29cfae..."
          },
          "ttl": {
            "type": "number",
            "description": "TTL value in seconds",
            "example": 3600
          }
        },
        "required": ["parentName", "label"]
      },
      "GetSubnameResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the subname",
            "example": "123"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the subname (e.g., alice.oppunk.eth)",
            "example": "alice.oppunk.eth"
          },
          "parentName": {
            "type": "string",
            "description": "Parent name (e.g., oppunk.eth)",
            "example": "oppunk.eth"
          },
          "label": {
            "type": "string",
            "description": "Label of the subname (e.g., alice)",
            "example": "alice"
          },
          "texts": {
            "type": "object",
            "description": "Text records associated with the subname",
            "example": { "email": "alice@example.com" }
          },
          "addresses": {
            "type": "object",
            "description": "Address records associated with the subname",
            "example": { "ETH": "0x1234...abcd" }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the subname",
            "example": { "role": "admin" }
          },
          "contenthash": {
            "type": "string",
            "description": "Content hash of the subname",
            "example": "ipfs://Qm..."
          },
          "namehash": {
            "type": "string",
            "description": "Namehash of the subname",
            "example": "0xabc123..."
          }
        },
        "required": [
          "id",
          "fullName",
          "parentName",
          "label",
          "texts",
          "addresses",
          "metadata",
          "namehash"
        ]
      },
      "QuerySubnamesRequest": {
        "type": "object",
        "properties": {
          "parentName": {
            "type": "string",
            "description": "Subname parent name",
            "example": "oppunk.eth"
          },
          "parentNames": {
            "description": "List of subname parent names",
            "example": ["oppunk.eth", "example.eth"],
            "type": "array",
            "items": { "type": "string" }
          },
          "labelSearch": {
            "type": "string",
            "description": "Search subnames by label",
            "example": "alice"
          },
          "page": {
            "type": "number",
            "description": "Current page. Defaults to 1",
            "example": 1
          },
          "size": {
            "type": "number",
            "description": "Page size. Defaults to 25",
            "example": 25
          },
          "owner": {
            "type": "string",
            "description": "Search by subname ownership",
            "example": "0x1234...abcd"
          },
          "metadata": {
            "type": "object",
            "description": "Search by metadata properties",
            "example": { "role": "admin", "verified": "true" }
          }
        },
        "required": ["parentName"]
      }
    }
  }
}
